{"version":3,"sources":["components/Header.jsx","components/Item.jsx","components/TodoInput.jsx","components/MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","rel","target","Item","props","onClick","delete","text","TodoInput","state","input","tasks","handleChange","bind","addTask","key","value","this","setState","localStorage","setItem","e","name","taskItem","id","Date","now","slice","push","console","log","JSON","stringify","deleted","filter","task","hydrateStateWithLocalStorage","hasOwnProperty","getItem","parse","map","deleteTask","onSubmit","autoComplete","required","type","placeholder","onChange","React","Component","MainContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b45a45cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return(\r\n        <div>\r\n            <div className=\"Header\">\r\n                <h1>To Do List</h1>\r\n                <a href=\"https://realtechnerd.github.io\" rel=\"noopener noreferrer\" target=\"_blank\">By Nithil Krishnaraj</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Item(props) {\r\n    return(\r\n        <div className=\"Item\" onClick={props.delete}>\r\n            <h2>{props.text}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport \"./style.css\";\r\nimport Item from \"./Item.jsx\";\r\n\r\nclass TodoInput extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: \"\",\r\n            tasks: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addTask = this.addTask.bind(this);\r\n    };\r\n    updateInput(key, value) {\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n        localStorage.setItem(key, value)\r\n    }\r\n    handleChange(e) {\r\n        const {name, value} = e.target;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    addTask() {\r\n        const taskItem = {\r\n            id: Date.now(),\r\n            text: this.state.input.slice()\r\n        };\r\n\r\n        const tasks = [...this.state.tasks]\r\n\r\n        tasks.push(taskItem);\r\n\r\n        console.log(tasks);\r\n\r\n        this.setState({\r\n            tasks: tasks,\r\n            input: \"\"\r\n        });\r\n        \r\n        localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n        localStorage.setItem(\"newItem\", \"\")\r\n    }\r\n    deleteTask(id) {\r\n        const tasks = [...this.state.tasks];\r\n\r\n        const deleted = tasks.filter(task => task.id !== id);\r\n    \r\n        this.setState({ tasks: deleted });\r\n        localStorage.setItem(\"tasks\",JSON.stringify(deleted));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hydrateStateWithLocalStorage();\r\n    }  \r\n    \r\n    hydrateStateWithLocalStorage() {\r\n        // for all items in state\r\n        for (let key in this.state) {\r\n          // if the key exists in localStorage\r\n          if (localStorage.hasOwnProperty(key)) {\r\n            // get the key's value from localStorage\r\n            let value = localStorage.getItem(key);\r\n            console.log(\"value = \" + value);\r\n            // parse the localStorage string and setState\r\n            try {\r\n              value = JSON.parse(value);\r\n              this.setState({ [key]: value });\r\n              console.log('intry')\r\n            } catch (e) {\r\n              // handle empty string\r\n              this.setState({ [key]: value });\r\n              console.log('incatch')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    render() { \r\n        const task = this.state.tasks.map(task => {\r\n            return(\r\n                <div>\r\n                    <Item key={task.id} text={task.text} delete={() => this.deleteTask(task.id)}/>\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <div className='container'>\r\n                    <div className=\"TodoInput\">\r\n                        <h1>Add a Task</h1>\r\n                        <form id=\"submit\" onSubmit={this.addTask} autoComplete=\"off\" required>\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"input\"\r\n                                id=\"input\"\r\n                                value={this.state.input}\r\n                                placeholder=\"Enter Task..\"\r\n                                onChange={this.handleChange}\r\n                                required\r\n                            />\r\n                            </form>\r\n                            <br/>\r\n                        <button \r\n                            className=\"lgbdanger blg scale\" \r\n                            onClick={this.addTask} \r\n                            type=\"submit\"\r\n                            id=\"submit\"\r\n                        >\r\n                        &ensp;Add Task&ensp;\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"Items\">\r\n                        {task}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TodoInput;","import React from 'react';\r\nimport \"./style.css\";\r\nimport TodoInput from \"./TodoInput.jsx\";\r\n\r\nclass MainContent extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"MainContent\">\r\n                <TodoInput/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default MainContent;","import React from 'react';\nimport Header from \"./components/Header.jsx\";\nimport MainContent from \"./components/MainContent.jsx\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <MainContent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}