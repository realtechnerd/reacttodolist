{"version":3,"sources":["components/Header.jsx","components/Item.jsx","components/TodoInput.jsx","components/MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Item","props","onClick","delete","text","TodoInput","state","content","tasks","msg","handleChange","bind","addTask","key","value","this","setState","localStorage","setItem","e","target","name","taskItem","id","Date","now","slice","push","console","log","JSON","stringify","preventDefault","deleted","filter","task","hydrateStateWithLocalStorage","hasOwnProperty","getItem","parse","map","deleteTask","onSubmit","autoComplete","required","type","placeholder","onChange","React","Component","MainContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.18806b25.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return(\r\n        <div>\r\n            <div className=\"Header\">\r\n                <h1>TaskBuddy</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Item(props) {\r\n    return(\r\n        <div className=\"Item\" onClick={props.delete}>\r\n            <h2>{props.text}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport \"./style.css\";\r\nimport Item from \"./Item.jsx\";\r\n\r\nclass TodoInput extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            content: \"\",\r\n            tasks: [],\r\n            msg: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addTask = this.addTask.bind(this);\r\n    };\r\n    updateInput(key, value) {\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n        localStorage.setItem(key, value)\r\n    }\r\n    handleChange(e) {\r\n        const {name, value} = e.target;\r\n        \r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    addTask(e) {\r\n        if (this.state.content == \"\") {\r\n            this.setState({\r\n                msg: \"Please input something!\"\r\n            })\r\n            return false;\r\n        };\r\n\r\n        const taskItem = {\r\n            id: Date.now(),\r\n            text: this.state.content.slice()\r\n        };\r\n\r\n        const tasks = [...this.state.tasks]\r\n\r\n        tasks.push(taskItem);\r\n\r\n        console.log(tasks);\r\n\r\n        this.setState({\r\n            tasks: tasks,\r\n            content: \"\"\r\n        });\r\n        \r\n        localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n        localStorage.setItem(\"newItem\", \"\")\r\n        \r\n        e.preventDefault();\r\n    }\r\n    deleteTask(id) {\r\n        const tasks = [...this.state.tasks];\r\n\r\n        const deleted = tasks.filter(task => task.id !== id);\r\n    \r\n        this.setState({ tasks: deleted });\r\n        localStorage.setItem(\"tasks\",JSON.stringify(deleted));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hydrateStateWithLocalStorage();\r\n    }  \r\n    \r\n    hydrateStateWithLocalStorage() {\r\n        // for all items in state\r\n        for (let key in this.state) {\r\n          // if the key exists in localStorage\r\n          if (localStorage.hasOwnProperty(key)) {\r\n            // get the key's value from localStorage\r\n            let value = localStorage.getItem(key);\r\n            console.log(\"value = \" + value);\r\n            // parse the localStorage string and setState\r\n            try {\r\n              value = JSON.parse(value);\r\n              this.setState({ [key]: value });\r\n              console.log('intry')\r\n            } catch (e) {\r\n              // handle empty string\r\n              this.setState({ [key]: value });\r\n              console.log('incatch')\r\n            }\r\n          }\r\n        }\r\n      }\r\n    \r\n    render() { \r\n        const task = this.state.tasks.map(task => {\r\n            return(\r\n                <div>\r\n                    <Item key={task.id} text={task.text} delete={() => this.deleteTask(task.id)}/>\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <div className='container'>\r\n                    <div className=\"TodoInput\">\r\n                        <h1>Add a Task</h1>\r\n                        <form id=\"submit\" onSubmit={this.addTask} autoComplete=\"off\" required>\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"content\"\r\n                                id=\"input\"\r\n                                value={this.state.content}\r\n                                placeholder=\"Enter Task..\"\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            <br/>\r\n                            <div id=\"msg\">\r\n                                {this.state.msg}\r\n                            </div>\r\n                            </form>\r\n                            <br/>\r\n                        <button \r\n                            className=\"lgbdanger blg scale\" \r\n                            onClick={this.addTask} \r\n                            type=\"submit\"\r\n                            id=\"submit\"\r\n                        >\r\n                        &ensp;Add Task&ensp;\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"Items\">\r\n                        {task}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TodoInput;\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport TodoInput from \"./TodoInput.jsx\";\r\n\r\nclass MainContent extends React.Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"MainContent\">\r\n                <TodoInput/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default MainContent;","import React from 'react';\nimport Header from \"./components/Header.jsx\";\nimport MainContent from \"./components/MainContent.jsx\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <MainContent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}